h1. Assert Changes Test Helpers

assert_changes is a more general version of assert_difference test helper.
Whereas assert_difference is numerical only, and can only assert that integer
counts have changed, assert_changes evaluates pre- and post- conditions for
any ruby type. It can evaluate boolean expressions, as well as Strings or
any objects that can evaluated for equality. 

Mix into your test or test_helper to write more concise tests.

h3. assert_changes

Assert that a any Ruby expression changes. Instead of: 
<pre><code>    assert a != 'world'
    a = 'world'
    assert_equal 'world', a
</code></pre>
Write DRY:
<pre><code>    include AssertChanges
    ...
    assert_changes 'a' do
        a = 'world'
    end
</code></pre>

The string <code>'a'</code> passed to assert changes is evaluated in the block context, both before and after the block is run. The first eval is call the "pre-condition", and the
second the "post-condition".

Assert that several things change by passing an array:

<pre><code>    a,b = 'hello','hi'
    assert_changes ['a','b'] do
        a = 'world'
        b = 'earth'
    end
</code></pre>

Be explicit about a state change by specifying both the starting and ending values using an expression pointing to array of before and after values:
<pre><code>    o.answer = 'yes'
    assert_changes 'o.answer' => ['yes','no'] do
      o.answer = 'no'
    end
</code></pre>    

Sometimes you don't care about the original value, such as a value from the
fixture, but you need to make sure it starts out different than the final
result (otherwise the test is invalid). Pass just the final value. 

When given one value, it is considered the post-condition value. 
The precondition is that the value does NOT equal it:

<pre><code>    i = true
    assert_changes 'i' => false do   # read as: i changes to false
      i = false
    end
</code></pre>

Pass multiple pre/post conditions of arbitrary complexity:

<pre><code>      assert_changes 'post(:a).status' => [:preview, :published],
                            'comment(:c).status' => [:preview, :deleted] do
        ...
      end
</code></pre>    

h3. assert_no_changes

assert_no_changes is a modified version of this. It has slightly extended parameter possibilities:

<pre><code>    i,j = 'hello','hi'
    assert_no_changes 'i' do ...                # i (before) == i (after)
    assert_no_changes 'i'=>'hello' do ...       # i == 'hello' before and after
    assert_no_changes ['i','j'] do ...          # neither i nor j change
    assert_no_changes 'i'=>'hello','j'=>'hi' do # or be explicit with multiple
</code></pre>

h3. A Complex Example

Provide multiple assertions of arbitrary complexity, referencing fixtures, etc. 
Note that assert_changes supports the :no_change symbol:

<pre><code>    assert_changes
        'inotech.services.public.include?(categories(:a))' => [true, :no_change],
            'inotech.services.public.include?(categories(:b))'=>false,
            'inotech.services.public.include?(categories(:c))'=>false do
      post :edit_services_dialog, :id=>inotech.id, :service_category_id=>categories(:a).id
    end
</code></pre>
