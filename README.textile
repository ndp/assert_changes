h1 Assert Changes Test Helpers

assert_changes is a more general version of assert_difference test helper.
Whereas assert_difference is numerical only, and can only assert that integer
counts have changed, assert_changes evaluates pre- and post- conditions for
any ruby type. It can evaluate boolean expressions, as well as Strings or
any objects that can evaluated for equality. 

Mix into your test or test_helper to write more concise tests.

h3. assert_changes

Assert that a any Ruby expression changes: 
<pre><code>    assert a != 'world'
	a = 'world'
	assert_equal 'world', a
</code></pre>
can be rewritten DRY:
<pre><code>    include AssertChanges
    ...
	assert_changes 'a' do
		a = 'world'
	end
</code></pre>

Assert that several things change by passing an array:

<pre><code>    a,b = 'hello','hi'
	assert_changes ['a','b'] do
	    a = 'world'
	    b = 'earth'
	end
</code></pre>

Be explicit about a state change by specifying both the starting and ending values using an expression pointing to array of before and after values:
<pre><code>    o.answer = 'yes'
    assert_changes 'o.answer' => ['yes','no'] do
      o.answer = 'no'
    end
</code></pre>    

Pass just one value and it the precondition is that the value does not equals this,
and the post-condition is that it now equals the specified value:

<pre><code>    i = true
    assert_changes 'i' => false do   # read as: i changes to false
      i = false
    end
</code></pre>

The strings passed to assert changes is evaluated in the block context, both before and after the block is run. 

Pass multiple pre/post conditions of arbitrary complexity:

<pre><code>      assert_changes 'post(:a).status' => [:preview, :published],
                            'comment(:c).status' => [:preview, :deleted] do
        ...
      end
</code></pre>    

h3. assert_no_changes

assert_changes supports the :no_change symbol:

<pre><code>    assert_changes
        'inotech.services.public.include?(categories(:a))' => [true, :no_change] do
      post :edit_services_dialog, :id=>inotech.id, :service_category_id=>categories(:a).id
    end
</code></pre>

assert_no_changes is a modified version of this. It has slightly extended parameter possibilities:

<pre><code>    i,j = 'hello','hi'
    assert_no_changes 'i' do ...                # i (before) == i (after)
    assert_no_changes 'i'=>'hello' do ...       # i == 'hello' before and after
    assert_no_changes ['i','j'] do ...          # neither i nor j change
    assert_no_changes 'i'=>'hello','j'=>'hi' do # or be explicit with multiple
</code></pre>

